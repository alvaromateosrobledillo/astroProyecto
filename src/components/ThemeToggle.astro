---
import MoonIcon from "./icons/Moon.astro";
import SunIcon from "./icons/Sun.astro"
import SystemIcon from "./icons/System.astro"

const THEMES = ["Light", "Dark", "System"];
---

<div class="relative">
  <button
    id="theme-toggle-btn"
    class="appearance-none border-none flex justify-center items-center w-10 h-10 rounded-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors duration-300"
  >
    <span class="sr-only">Elige el tema</span>
    <SunIcon id="light" class="theme-toggle-icon transition-all" />
    <MoonIcon id="dark" class="theme-toggle-icon absolute transition-all" />
    <SystemIcon id="system" class="theme-toggle-icon absolute transition-all" />
  </button>
  <div
    id="themes-menu"
    class="absolute hidden top-12 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-lightBorder bg-lightBackground dark:bg-darkBackground dark:border-darkBorder shadow-lg backdrop-blur-md"
  >
    <ul>
      {THEMES.map((theme) => (
        <li class="themes-menu-option px-2 py-1.5 cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600 rounded-sm transition-colors duration-200">
          {theme}
        </li>
      ))}
    </ul>
  </div>
</div>

<style>
  #themes-menu.open {
    display: block;
    animation: scale-up-center 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }

  .theme-toggle-icon {
    scale: 0;
  }

  .theme-toggle-icon.size-5 {
    width: 1.25rem;
    height: 1.25rem;
  }
</style>

<script is:inline>
  let remove = null;
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
  const themesMenu = document.getElementById("themes-menu");

  const getThemePreference = () => {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem("theme") ?? "system";
    }
    return matchMedia.matches ? "dark" : "light";
  };

  const updateIcon = (themePreference) => {
    document.querySelectorAll(".theme-toggle-icon").forEach((element) => {
      element.style.scale = element.id === themePreference ? "1" : "0";
    });
  };

  const updateTheme = () => {
    if (remove != null) {
      remove();
    }
    matchMedia.addEventListener("change", updateTheme);
    remove = () => {
      matchMedia.removeEventListener("change", updateTheme);
    };

    const themePreference = getThemePreference();
    const isDark =
      themePreference === "dark" ||
      (themePreference === "system" && matchMedia.matches);

    updateIcon(themePreference);
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");
  };

  updateTheme();

  document.addEventListener("click", () => themesMenu.classList.remove("open"));

  document.getElementById("theme-toggle-btn").addEventListener("click", (e) => {
    e.stopPropagation();
    const isClosed = !themesMenu.classList.contains("open");
    themesMenu.classList[isClosed ? "add" : "remove"]("open");
  });

  document.querySelectorAll(".themes-menu-option").forEach((element) => {
    element.addEventListener("click", (e) => {
      localStorage.setItem("theme", e.target.innerText.toLowerCase().trim());
      updateTheme();
    });
  });
</script>
